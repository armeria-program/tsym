
function! s:insertIncludeGuard()
    let fullname = toupper(expand('%'))
    let reducedname = substitute(fullname, 'src\/', '', '')
    let gatename = substitute(substitute(reducedname, '\.', '_', 'g'), '\/', '_', 'g')
    execute "normal! i#ifndef TSYM_" . gatename
    execute "normal! o#define TSYM_" . gatename . "\n"
    execute "normal! Go#endif"
    normal! kk
endfunction

autocmd BufNewFile *.{h,hpp} call <SID>insertIncludeGuard()
autocmd BufRead,BufReadPost README.md set spell spelllang=en_us

call add(g:UltiSnipsSnippetDirectories, getcwd() . '/misc')

set path=bin/**,misc/**,src/**,include/**,test/**

function! GetTestEntityName(pattern)
    let l:nLine = line('.')

    while getline(l:nLine) !~ a:pattern
        let l:nLine = l:nLine - 1
        if l:nLine == 0
            return ''
        endif
    endwhile

    return matchlist(getline(l:nLine), a:pattern)
endfunction

function! GetTestCaseName()
    let l:pattern = '^ *BOOST_\(FIXTURE\|AUTO\)_TEST_CASE *( *\([^, ]\+\)[, ]*.*)'

    return GetTestEntityName(l:pattern)[2]
endfunction

function! GetTestSuiteName()
    let l:pattern = '^ *BOOST_\(FIXTURE\|AUTO\)_TEST_SUITE *( *\([^, ]\+\)[, ]*.*)'

    return GetTestEntityName(l:pattern)[2]
endfunction

function! RunTests(filter)
    let l:cmd = '!set -x && runtests -t ' . a:filter

    execute l:cmd
endfunction

function! RunTestSuiteCursorIsIn()
    let l:suite = GetTestSuiteName()

    call RunTests(l:suite)
endfunction

function! RunTestCaseCursorIsIn()
    let l:test = GetTestCaseName()
    let l:suite = GetTestSuiteName()

    call RunTests(l:suite . '/' . l:test)
endfunction

map <F8> :up<CR>:exe ":make! build/" . substitute(expand('%'), '\.[hc]p*', '.o', '')<CR>:cw<CR>
imap <F8> <ESC><F8>
map <F10> :argadd `git ls-files '*.h' '*.cpp'`
map <F11> :call RunTestCaseCursorIsIn()<CR>
map <F12> :call RunTestSuiteCursorIsIn()<CR>
