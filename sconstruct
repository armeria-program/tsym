
from SCons import Errors
import subprocess
import platform
import shutil
import time
import glob
import stat
import sys
import os
import re

NAME = 'tsym'
LIBNAME = 'lib%s' % NAME
DEFAULT_PREFIX = '/usr/local'
DEFAULT_BUILDDIR = 'build'
TEST_EXEC = './bin/runtests'

def git(*args):
    return subprocess.check_output(['git'] + list(args))

def getRepoInfo():
    branch = git('rev-parse', '--abbrev-ref', 'HEAD').strip()
    commit = git('log', '--pretty=format:%h', '-n 1')
    tag = git('name-rev', '--name-only', '--tags', 'HEAD').strip()
    if tag != 'undefined' and tag.startswith('v'):
        major, minor = int(tag[1]), int(tag[3])
        tag = None
    else:
        major, minor = 0, 0
    return branch, major, minor, commit

def writeVersionHeader(target, source, env):
    branch, major, minor, commit = getRepoInfo()
    info = [('VERSION_MAJOR %d' % major, None), ('VERSION_MINOR %d' % minor, None),
            ('COMMIT', commit), ('BRANCH', branch),
            ('CPP_COMPILER', env['CXX'] + ' ' + env['CXXVERSION']),
            ('CPP_FLAGS', env['CCFLAGS'] + env['CXXFLAGS']),
            ('C_COMPILER', env['CC'] + ' ' + env['CCVERSION']),
            ('C_FLAGS', env['CCFLAGS'] + env['CFLAGS']),
            ('PARSER_GENERATOR', env['YACC']), ('LEXICAL_ANALYZER', env['LEX']),
            ('BUILD_OS', ' '.join(os.uname())), ('BUILD_DATE', time.ctime())]

    if env['WITH_DEBUG_STRINGS']:
        info.append(('DEBUG_STRINGS', None))

    if GetOption('useTrlog'):
        info.append(('USE_TRLOG', None))

    with open(str(target[0]), 'w') as fp:
        for pair in info:
            line = '#define %s_' % NAME.upper() + pair[0]
            line += ' "%s"\n' % str(pair[1]) if pair[1] else '\n'
            fp.write(line)

def deinstall(prefix):
    headerDir = os.path.join(prefix, 'include', NAME)

    for lib in glob.glob(os.path.join(prefix, 'lib', LIBNAME + '*')):
        os.remove(lib)
        sys.stdout.write('Remove %s\n' % lib)

    try:
        shutil.rmtree(headerDir)
        sys.stdout.write('Recursively remove directory %s\n' % headerDir)
    except:
        pass

def install(prefix, libSrcFile, versionHeader):
    headerTargetDir = os.path.join(prefix, 'include', NAME)
    dirs = [prefix, os.path.join(prefix, 'include'), os.path.join(prefix, 'lib'), headerTargetDir]

    for requiredFile in [versionHeader, libSrcFile]:
        if not os.path.exists(requiredFile):
            raise Errors.StopError('%s not found.' % requiredFile)

    for directory in dirs:
        if not os.path.exists(directory):
            os.mkdir(directory)
            os.chmod(directory, 0755)
            sys.stdout.write('Create directory %s\n' % directory)

    for header in glob.glob(os.path.join('include', '*.h')) + [versionHeader]:
        targetHeader = os.path.join(headerTargetDir, os.path.basename(header))
        shutil.copyfile(header, targetHeader)
        os.chmod(targetHeader, 0644)
        sys.stdout.write('Install %s to %s\n' % (header, headerTargetDir))

    libPath = os.path.join(prefix, 'lib', LIBNAME + Environment().subst('$SHLIBSUFFIX'))
    shutil.copyfile(libSrcFile, libPath)
    os.chmod(libPath, 0755)
    sys.stdout.write('Install %s as %s\n' % (libSrcFile, libPath))

def getVersion(program):
    pattern = re.compile(r'\d\.\d(\.\d)?')
    output = subprocess.check_output([program, '--version'])
    match = pattern.search(output.split('\n')[0])
    return match.group()

def buildDir(self, *paths):
    return os.path.join(self['BUILD_DIR'], *paths)

SetOption('num_jobs', 4)
AddOption('--without-trlog', dest = 'useTrlog', action = 'store_false', default = True)
AddOption('--no-coverage', dest = 'withCoverage', action = 'store_false', default = True)
AddOption('--release', dest = 'release', action = 'store_true', default = False)
AddOption('--prefix', dest = 'prefix', nargs = 1, action = 'store', default = DEFAULT_PREFIX)
AddOption('--builddir', dest = 'buildDir', nargs = 1, action = 'store', default = DEFAULT_BUILDDIR)

release = GetOption('release') and not 'CFLAGS' in os.environ and not 'CXXFLAGS' in os.environ
withCoverage = False if release or 'CXXFLAGS' in os.environ else GetOption('withCoverage')

env = Environment(BUILD_DIR = GetOption('buildDir'))

env.AddMethod(buildDir)

env.Append(CPPPATH = ['include'])
env.Append(CFLAGS = ['-pedantic', '-Wall', '-Wextra', '-Wno-sign-compare', '-Wno-unused-label',
    '-Wno-unused-function', '-Wno-unneeded-internal-declaration'])
env.Append(CXXFLAGS = ['-pedantic', '-Wall', '-Wextra', '-Werror=conversion'])

if release:
    env.Append(CFLAGS = '-O2', CXXFLAGS = '-O2', CPPDEFINES = 'NDEBUG')
else:
    env.Append(CFLAGS = ['-O0', '-g3', '-ggdb'], CXXFLAGS = ['-O0', '-g3', '-ggdb'])

for key in ('CC', 'CXX', 'CFLAGS', 'CXXFLAGS'):
    if key in os.environ.keys():
        env[key] = os.environ.get(key)

libEnv = env.Clone()
testEnv = env.Clone()
build = {}

libEnv.Replace(BUILD_DIR = env.buildDir('src'))
testEnv.Replace(BUILD_DIR = env.buildDir('test'))

libEnv.VariantDir(libEnv.buildDir(), 'src')
libEnv.Append(WITH_DEBUG_STRINGS = not release)
libEnv.Append(CPPPATH = libEnv.buildDir())
libEnv.Append(YACCFLAGS = '-d')
libEnv.Append(BUILDERS = {'LibHeader': Builder(action = writeVersionHeader)})
versionHeader = libEnv.LibHeader(libEnv.buildDir('version.h'), None)
scanner = libEnv.buildDir('scanner.c')
parser = libEnv.buildDir('parser.c')
libEnv.CFile(scanner, 'src/scanner.l')
libEnv.CFile(parser, 'src/parser.y')

testEnv.VariantDir(testEnv.buildDir(), 'test')
testEnv.Append(CPPPATH = [libEnv.buildDir(), testEnv.buildDir()])
testEnv.Append(LIBS = ['CppUTest', 'tsym'])
testEnv.Append(RPATH = env.buildDir())

if GetOption('useTrlog'):
    testEnv.Append(LIBS = 'trlog')

libTarget = libEnv.SharedLibrary(env.buildDir(LIBNAME),
    Glob(libEnv.buildDir('*.cpp')) + [scanner, parser])

if withCoverage:
    libEnv.Append(CXXFLAGS = '--coverage')
    libEnv.AppendUnique(LIBS = 'gcov')
    Clean(libTarget, Glob(libEnv.buildDir('*.gcno')) + Glob(libEnv.buildDir('*.gcda')))

testTarget = testEnv.Program(TEST_EXEC, Glob(testEnv.buildDir('*.cpp')))

prefix = GetOption('prefix')

if 'install' in COMMAND_LINE_TARGETS:
    install(prefix, str(libTarget[0]), str(versionHeader[0]))
elif 'deinstall' in COMMAND_LINE_TARGETS:
    deinstall(prefix)

Default([libTarget, testTarget])
Alias('lib', libTarget)
Alias('test', testTarget)
Alias('install', None)
Alias('deinstall', None)

Help("""
Build targets control:\n                                                                             
    [none]           shared library and unit tests
    'lib'            shared library
    'test'           unit tests only
    'install'        install library and header files
    'deinstall'      deinstall all libs and headers

Local options:\n
    --release        select default release compiler flags, strip debug helpers
    --no-coverage    don't add test coverage flags (only with default flags)
    --without-trlog  don't use the trlog library
    --prefix=dir     installation location (default %s)
    --builddir=dir   build directory (default %s)

Compiler and compiler flags:\n
    Environment variables CC, CXX, CFLAGS and CXXFLAGS are taken into account.
    In their absence, defaults are provided (debug or release).
""" % (DEFAULT_PREFIX, DEFAULT_BUILDDIR), append = False)
